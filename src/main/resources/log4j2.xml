<?xml version="1.0" encoding="UTF-8"?>
<!--
    参考：https://blog.csdn.net/qq_40615366/article/details/79835766
	log4j 2.x版本不再支持像1.x中的.properties后缀的文件配置方式，2.x版本配置文件后缀名只能为".xml",".json"或者".jsn".
	系统选择配置文件的优先级(从先到后)如下：
	(1).classpath下的名为log4j2-test.json 或者log4j2-test.jsn的文件.
　　(2).classpath下的名为log4j2-test.xml的文件.
　　(3).classpath下名为log4j2.json 或者log4j2.jsn的文件.
　　(4).classpath下名为log4j2.xml的文件.
	我们一般默认使用log4j2.xml进行命名。
-->
<!--
Configuration：
有两个属性:status和monitorinterval
	status：用来指定log4j本身的打印日志的级别
	monitorinterval：用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s.
有两个子节点:Appenders和Loggers(表明可以定义多个Appender和Logger)
-->
<!-- 设置log4j2的自身log级别为warn 级别：OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<Configuration status="OFF" monitorInterval="15">

    <!--自定义属性-->
    <properties>
        <!--输出日志的格式：
            %level{参数1}{参数2}{参数3} ##输出日志的级别
            %d{yyyy-MM-dd HH:mm:ss, SSS}：日志生产时间
            %t：打印日志方法所在线程名
            %p：日志输出格式
            %F|%file                  ##输出文件名
            %c{参数} 或 %logger{参数}  ##输出日志名称
            %C{参数} 或 %class{参数    ##输出类型
            %m 或 %msg 或 %message ##输出日志信息
            %n：换行符
            %C：Java类名
            %l  ##输出错误的完整位置
            %L：日志输出所在行数
            %M 或 %method ##输出方法名
            hostName：本地机器名
            hostAddress：本地ip地址
            highlight{pattern}{style} ##高亮显示
        -->
        <property name="pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %C{36}.%M(%F:%L): %msg%xEx%n</property>
    </properties>

    <!--Appenders节点，常见的有三种子节点:Console、RollingFile、File-->
    <Appenders>

        <!-- 控制台输出 -->
        <!--
            Console节点用来定义输出到控制台的Appender
            name:指定Appender的名字
            target:SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT.
            PatternLayout:输出格式，不设置默认为:%m%n.
        -->
        <Console name="CONSOLE" target="SYSTEM_OUT">
            <!--只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--输出日志的格式，引用自定义模板 pattern -->
            <PatternLayout charset="UTF-8" pattern="${pattern}"/>
        </Console>

        <!--
            RollingFile节点用来定义超过指定大小自动删除旧的创建新的的Appender.
            name:指定Appender的名字
            fileName:指定输出日志的目的文件带全路径的文件名.
            PatternLayout:输出格式，不设置默认为:%m%n.
            filePattern:指定新建日志文件的名称格式.
            Policies:指定滚动日志的策略，就是什么时候进行新建日志文件输出日志
        -->
        <!-- 配置程序调试时的日志输出 -->
        <RollingFile name="DEBUG"
                     fileName="${maven.log4j.rootPath}/${maven.serverRootDir}/debug.log"
                     filePattern="${maven.log4j.rootPath}/${maven.serverRootDir}/$${date:yyyy-MM}/$${date:dd}/debug-%d{yyyy-MM-dd}-%i.log">

            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <Filters>
                <ThresholdFilter level="DEBUG"/>
                <ThresholdFilter level="INFO" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>

            <PatternLayout pattern="${pattern}"/>

            <!--Policies:指定滚动日志的策略，就是什么时候进行新建日志文件输出日志.-->
            <Policies>
                <!--TimeBasedTriggeringPolicy:Policies子节点，基于时间的滚动策略，
                interval属性用来指定多久滚动一次，默认是1 hour。-->
                <TimeBasedTriggeringPolicy interval="2hour"/>
                <!--SizeBasedTriggeringPolicy:Policies子节点，基于指定文件大小的滚动策略，
                size属性用来定义每个日志文件的大小.-->
                <SizeBasedTriggeringPolicy size="100MB"/>
            </Policies>
            <!--最多保留20个日志文件-->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>

        <!--配置程序运行时的日志输出-->
        <RollingFile name="INFO"
                     fileName="${maven.log4j.rootPath}/${maven.serverRootDir}/info.log"
                     filePattern="${maven.log4j.rootPath}/${maven.serverRootDir}/$${date:yyyy-MM}/$${date:dd}/info-%d{yyyy-MM-dd}-%i.log">
            <Filters>
                <ThresholdFilter level="INFO"/>
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="${pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100MB"/>
            </Policies>
            <!--最多保留20个日志文件-->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>


        <!--配置程序运行时的警告日志输出-->
        <RollingFile name="WARN"
                     fileName="${maven.log4j.rootPath}/${maven.serverRootDir}/warn.log"
                     filePattern="${maven.log4j.rootPath}/${maven.serverRootDir}/$${date:yyyy-MM}/$${date:dd}/warn-%d{yyyy-MM-dd}-%i.log">
            <Filters>
                <ThresholdFilter level="WARN"/>
                <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="${pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100MB"/>
            </Policies>
            <!--最多保留20个日志文件-->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>


        <!--配置出现重量级的异常时的日志输出-->
        <RollingFile name="ERROR"
                     fileName="${maven.log4j.rootPath}/${maven.serverRootDir}/error.log"
                     filePattern="${maven.log4j.rootPath}/${maven.serverRootDir}/$${date:yyyy-MM}/$${date:dd}/error-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="ERROR"/>
            <PatternLayout pattern="${pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100MB"/>
            </Policies>
            <!--最多保留20个日志文件-->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>


        <!--配置出现灾难性的异常时的日志输出-->
        <RollingFile name="FATAL"
                     fileName="${maven.log4j.rootPath}/${maven.serverRootDir}/fatal.log"
                     filePattern="${maven.log4j.rootPath}/${maven.serverRootDir}/$${date:yyyy-MM}/$${date:dd}/fatal-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="FATAL"/>
            <PatternLayout pattern="${pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100MB"/>
            </Policies>
            <!--最多保留20个日志文件-->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>

    </Appenders>

    <!--.Loggers节点，常见的有两种:Root和Logger.-->
    <Loggers>

        <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
        <!--过滤掉spring等框架的无用日志信息，也可以在springboot的logging.level.org.springframework=FATAL设置-->
        <logger name="org.springframework" level="INFO"/>
        <!--Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出-->
        <!--level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.-->
        ${maven.log4j.rootLogger}
    </Loggers>
</Configuration>